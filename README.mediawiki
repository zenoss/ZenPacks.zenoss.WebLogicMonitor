{{ZenPack
|Summary=This ZenPack allows you to monitor an Oracle WebLogic Server.
|ZenPack name=ZenPacks.zenoss.WebLogicMonitor
|Documentation URL=http://www3.zenoss.com/l/3432/2013-02-28/33h4xx
|Source URI=git://github.com/zenoss/ZenPacks.zenoss.WebLogicMonitor.git
|Releases=
|Devices=
|Applications={{Application
|Product Name=Oracle WebLogic Server
}}
|Integrations=
|DataAudits=
|Binaries=
|Flavor=commercial
}}

The <span class="zenpack">ZenPacks.zenoss.WebLogicMonitor</span> ZenPack monitors Oracle WebLogic Server services.


This ZenPack uses the JMX Remote API and and accesses MBeans deployed within WebLogic that contain performance information about the components that are being managed. This performance information includes pool sizes for data sources (JDBC), threads, connections (JCA), queues (JMS), servlets, JSPs, Enterprise Java Beans (EJB), timer queues.

Throughput is also monitored when it is available. This metric is computed by WebLogic and is based on the number of messages moving through a queue at any given time. The throughput metric gives a good picture of the health of the messaging subsystem, which is commonly used throughout many enterprise applications. Stateless, Stateful, and Entity EJB performance metrics are monitored, as are message driven bean performance.

Security realms are also monitored for potential denial of service attacks. This includes recording of authentication failures, broken out by valid accounts, invalid accounts, and accounts that are currently locked out. Application specific realms can be monitored by customizing the built in WebLogic default realm.


== Overall Application Server Vitals ==


* Number of total and active JMS connections and servers
* Overall number of JTA transactions that are rolled back or abandoned
* JTA transactions rolled back due to system, application, or resource issues
* Number of JTA rollbacks that timeout
* Active and committed JTA transaction count
* Timer exceptions, executions, and scheduled triggers
* User accounts that are locked and unlocked
* Authentication failures against locked accounts and non-existent accounts
* Total sockets opened, and the current number of open sockets
* JVM Mark/Sweep and Scavenge garbage collector execution counts
* Number of JVM daemon threads
* JVM Heap/Non-Heap used and committed memory


== Entity EJB, Message Driven Bean (MDB), and Session EJB Subsystem Metrics ==


* Rollback and commit count on a per-EJB basis
* Bean pool accesses, cache hits, and cache misses
* Number of Beans in use, idle, and destroyed
* Number of activations and passivations


== Data Pool (JDBC) metrics ==


* Leaked, Total, and Active connections
* Number of requests waiting for a connection
* Number of reconnect failures


== Queue (JMS) Metrics ==


* Bytes received, currently active, and pending in the queue
* Number of queue consumers
* Number of current, pending, and receives messages


== Prerequisites ==


WebLogic 10.0 or higher is required.


== Configuring WebLogic to Allow JMX Queries ==


To enable remote JMX access set the following variables in "startWebLogic.sh" (Linux) or "startWebLogic.cmd" (Windows):

<pre class="pre codeblock programlisting">
	set JAVA_OPTIONS=%JAVA_OPTIONS% -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=12347 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djavax.management.builder.initial=weblogic.management.jmx.mbeanserver.WLSMBeanServerBuilder
</pre>

This file normally located in "bin" directory under your domain.
For example on Windows with domain "base_domain" this may be "C:\Oracle\Middleware\user_projects\domains\base_domain\bin\startWebLogic.cmd"

Open it with text editor and search for "echo WLS Start Mode=%WLS_DISPLAY_MODE%" line.
Put JAVA options above after this line. Then save file and restart WebLogic.
Now you have your 12347 port binded to JMX queries from Zenoss (zJmxManagementPort property).
This port number may be changed due to your needs.

Depending on your OS security, it may be required to add appropriate rule to firewall.


== Configuring <span class="ph">Zenoss platform</span> ==


All WebLogic services must have a device entry under the <span class="ph filepath">/Devices/Server/WebLogic</span> device class.


<span class="notetitle">Note:</span>
The <span class="keyword cmdname">zenjmx</span> daemon must be configured and running. See [[ZenPack:Java_2_Platform_Standard_Edition_(J2E)]] for more information about configuring the <span class="keyword cmdname">zenjmx</span> daemon with the Sun JRE tools.


<ol>
<li>Navigate to the device class or device.

<ul>
<li>If applying changes to a device class:

<ol>
<li>Select the class in the devices hierarchy.
</li>
<li>Click '''Details'''.
</li>
<li>Select Configuration Properties.
</li></ol>
</li>
<li>If applying changes to a device:

<ol>
<li>Click the device in the device list.
</li>
<li>Select Configuration Properties.
</li></ol>
</li></ul>
</li>
<li>Edit the appropriate configuration properties for the device or devices.


{| class="wikitable"
|+ <span class="tablecap"><span class="tablecap">WebLogic Configuration Properties</span></span>
!width="50%"|Name
!width="50%"|Description
|-
|zWebLogicJmxManagementAuthenticate

|This configuration property is deprecated

|-
|zWebLogicJmxManagementPassword

|JMX password

|-
|zWebLogicJmxManagementPort

|The port number used to gather JMX information

|-
|zWebLogicJmxManagementUsername

|JMX username for authentication

|}


</li>
<li>Click <span class="ph uicontrol guibutton">Save</span> to save your changes.

You will now be able to start collecting the WebLogic server metrics from this device.
</li>
<li>Navigate to Graphs and you should see some placeholders for performance graphs. After approximately 15 minutes you should see the graphs start to become populated with information.
</li></ol>


<span class="tiptitle">Tip:</span>
The out-of-the-box WebLogic data source configuration has been defined at the macro level, but can be configured to operate on a more granular basis. For example, the Servlet Reload Count applies to all servlets in all web applications but it could be narrowed to be Servlet /submitOrder in web application "production server".


== Change the Amount of Data Collected and Graphed ==

For performance reasons you may reduce the amount of metrics retrieved.

<ol>
<li>Navigate to the device or device class.
</li>
<li>Select Monitoring Templates in the left panel.
</li>
<li>From the Action menu, select Bind Templates to display the <span class="ph uicontrol guilabel">Bind Templates</span> dialog.
</li>
<li>Move templates from the Available area to the Selected area, and then click '''Save'''.


{| class="wikitable"
|+ <span class="tablecap"><span class="tablecap">WebLogic Templates</span></span>
!width="50%"|Name
!width="50%"|Description
|-
|WebLogic Core

|Core information about any WebLogic server, including memory usage, threads, and uptime.

|-
|WebLogic JCA

|

|-
|WebLogic JMS

|

|-
|WebLogic JMS Destination

|

|-
|WebLogic JTA

|

|-
|WebLogic JTA Rollbacks

|

|-
|WebLogic JVM

|

|-
|WebLogic Thread Pool

|Threadpool metrics measured per Tomcat connector

|-
|WebLogic Timer Service

|

|-
|WebLogic User Lockouts

|

|}


</li>
<li>Click the <span class="ph uicontrol guibutton">OK</span> button to save your changes.
</li></ol>


== Viewing Raw Data ==


WebLogic has a tool to check with monitoring data - "WebLogic ServerAdministration Console".
By default it is available on:

	http://WEB_LOGIC_HOST:7001/console/dashboard


To view raw data JConsole application from Java suite can be used.
To connect to WebLogic Server JMX point JConsole to:

	service:jmx:rmi:///jndi/rmi://SERVER_IP:JMX_PORT/jmxrmi


== Monitor SSL-Proxied WebLogic Servers ==


If you are monitoring a Web application running on WebLogic server, you may find that the transaction always fails with a code 550 regardless of how you configure the script. This could be a result of the WebLogic server being behind an SSL proxy. When used in this configuration, WebLogic requires that a <samp class="ph codeph literal">WL-Proxy-SSL</samp> header be added to the request so that it knows to redirect to HTTPS instead of HTTP.

To support this extra header in your <span class="ph">Zenoss platform</span> Web transaction, you must make the following changes on the script tab of your WebTx data source.

<ul>
<li>Remove any content from the <span class="ph uicontrol guilabel">Initial URL</span> field.
</li>
<li>Add the following to the beginning of the <span class="ph uicontrol guilabel">Script</span> box.

<pre class="pre codeblock programlisting">add_extra_header WL-Proxy-SSL true
go</pre></li></ul>

== Monitor JDBC Datasources and JDBC Connection Pools ==

By default this template not binded to WebLogic device.

''WebLogic JDBC'' monitoring template is an example of configuration. It should be copied and modified to use with your JDBC datasources. In this template ''testds'' datasource name should be changed to actual datasource name.

To add additional JDBC metrics one may use ''http://WEB_LOGIC_HOST:7001/console/dashboard'' monitoring dashboard and set filters:
 * Servers: WEB_LOGIC_SERVER
 * Types: JDBCDataSource / JDBCConnectionPool
 * Instances: JDBC_DATASOURCE_NAME

Metrics list will be populated with available options. These may be set as datasource params in ''WebLogic JDBC'' monitoring template.

To test these metrics on WebLogic dashboard new view (graph) may be created. Then it is required to click "Run" button at left top corner to run monitoring.

== Limitations ==


Depending on WebLogic server configuration it may happen that not all JMX datapoints are collected.
This may occur when all monitoring templates are enabled. To deal with it turn off monitoring templates you not interested in as described in "Change the Amount of Data Collected and Graphed" section.


== Changes ==

;2.3.0
* Added JDBC monitoring template
* Updated documentation for newer versions of WebLogic Server

;2.2.3
* Droped support of 9.0
* Updated monitoring templates for newer versions of WebLogic Server
* Added tests


{{ZenPackFooter}}
